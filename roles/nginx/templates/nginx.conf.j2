# The main context. This is where all the shit goes. Stuff out here gets inherited by any nested contexts.
# In nginx, directives are either simple directives (directive name followed by value) or context directives (directive name followed by an optional value (such as with a location directive), followed by a set of directives enclosed in curly braces). Nested contexts inherit from their surrounding contexts.

# The user and group that the worker processes will run as (nginx itself will run as root)
user www-data;
# The number of worker processes ('auto' means nginx will set this based on the number of logical CPU cores)
worker_processes auto;

# Defines a file that will serve as the pid of the main process.
pid /run/nginx.pid;

# Used to determine whether to run as a daemon. Mostly used during development.
# daemon on;

# Some debugging thing
# debug_points stop | abort;

# Determines where errors are logged and at what log lovel. Defeaults to log/error.log and error.
# error_log *location* | *level*;

# Determines what environment variables are inherited. Defaults to TZ.
# env var1, [var2, [var3, ...]];

# Determines where the lock file is, which is only an issue if 1) accept_mutex is enabled, and 2) nginx is running on a system that does not have atomic operations. Defaults to logs/nginx.lock.
# lock_file file;

# Determines whether worker processes are started. This is for nginx developers (you don't need it). Defaults to on;
# master_process on | off;

# Enables or disables JIT compiler for regular expressions. Defaults to off;
# pcre_jit on | off;

# Defines the name of the hardware SSL accelerator.
# ssl_engine device;

# Defines named thread pools. Defaults to "default," 32 threads, and a max_queue of 65536.
# thread_pool name threads=number [max_queue=number];

# Reduces timer resolution in worker processes, thus reducing the number of gettimeofday() system calls made. By default, gettimeofday() is called each time a kernel event is received. With reduced resolution, gettimeofday() is only called once per specified interval. The interval variable consists of a value and a unit.
# timer_resolution interval;

# Binds worker processes to the sets of CPUs. Each CPU set is represented by a bitmask of allowed CPUs. There should be a separate set defined for each of the worker processes. By default, worker processes are not bound to any specific CPUs.
# worker_cpu_affinity cpumask ...;

# Defines the scheduling priority for worker processes like it is done by the nice command: a negative number means higher priority. Allowed range normally varies from -20 to 20. Defaults to 0.
# worker_priority number;

# Changes the limit on the largest size of a core file (RLIMIT_CORE) for worker processes. Used to increase the limit without restarting the main process.
# worker_rlimit_core size;

# Changes the limit on the maximum number of open files (RLIMIT_NOFILE) for worker processes. Used to increase the limit without restarting the main process.
# worker_rlimit_nofile number;

# Defines the current working directory for a worker process. It is primarily used when writing a core-file, in which case a worker process should have write permission for the specified directory.
# working_directory directory;


# The events context. All of these deal with connection processing.
events {
   # This is the maximum number of connections that can be accepted by each worker process. This could also be limited by the maximum number of open files allowed at the OS level (ulimit), so adjust that accordingly. Defaults to 512.
	worker_connections 768;
    
    # If multi_accept is disabled, a worker process will accept one new connection at a time. Otherwise, a worker process will accept all new connections at a time. Defaults to off.
	# multi_accept on;
    
    # If accept_mutex is enabled, worker processes will accept new connections by turn. Otherwise, all worker processes will be notified about new connections, and if volume of new connections is low, some of the worker processes may just waste system resources. Defaults to on.
    # accept_mutex on | off;
    
    # If accept_mutex is enabled, specifies the maximum time during which a worker process will try to restart accepting new connections if another worker process is currently accepting new connections. Defaults to 500ms.
    # accept_mutex_delay time;
    
    # Enables debugging log for selected client connections. Other connections will use logging level set by the error_log directive. Debugged connections are specified by IPv4 or IPv6 (1.3.0, 1.2.1) address or network. A connection may also be specified using a hostname. For connections using UNIX-domain sockets (1.3.0, 1.2.1), debugging log is enabled by the “unix:” parameter.
    # debug_connection address | CIDR | unix:;
    
    # Specifies the connection processing method to use. There is normally no need to specify it explicitly, because nginx will by default use the most efficient method.
    # use method;
    
    # When using aio with the epoll connection processing method, sets the maximum number of outstanding asynchronous I/O operations for a single worker process. Defaults to 32.
    # worker_aio_requests number;
}

# The http context is basically a container for individual server directives.
http {

	##
	# Basic Settings
	##

    # Enables or disables the use of sendfile(), whatever that is. Defaults to off.
	sendfile on;
    
    # Enables or disables the use of the TCP_NOPUSH socket option on FreeBSD or the TCP_CORK socket option on Linux. The options are enabled only when sendfile is used. Enabling the option allows 1) sending the response header and the beginning of a file in one packet, on Linux and FreeBSD 4.*; and 2) sending a file in full packets. Defaults to off.
	tcp_nopush on;
    
    # Enables or disables the use of the TCP_NODELAY option. The option is enabled only when a connection is transitioned into the keep-alive state. Defaults to on.
	tcp_nodelay on;
	
    # The first parameter sets a timeout during which a keep-alive client connection will stay open on the server side. The zero value disables keep-alive client connections. The optional second parameter sets a value in the “Keep-Alive: timeout=time” response header field. Two parameters may differ. The “Keep-Alive: timeout=time” header field is recognized by Mozilla and Konqueror. MSIE closes keep-alive connections by itself in about 60 seconds. Defaults to 75s.
    keepalive_timeout 65;
	
    
    # Sets the maximum size of the types hash tables. Defaults to 1024.
    types_hash_max_size 2048;
    
    # Enables or disables emitting nginx version in error messages and in the “Server” response header field. Defaults to on.
	# server_tokens on | off;

    # Sets the bucket size for the server names hash tables. The default value depends on the size of the processor’s cache line (one of 32, 64, or 128).
	# server_names_hash_bucket_size size;
    
    # Enables or disables the use of the primary server name, specified by the server_name directive, in redirects issued by nginx. When the use of the primary server name is disabled, the name from the “Host” request header field is used. If this field is not present, the IP address of the server is used. Defaults to off.
	# server_name_in_redirect on | off;

    # Pulls in the mime.types definitions file.
	include /etc/nginx/mime.types;
    
    # Defines the default MIME type of a response. Mapping of file name extensions to MIME types can be set with the types directive.
	default_type application/octet-stream;

	##
	# SSL Settings
	##

    # Enables the specified protocols. The TLSv1.1 and TLSv1.2 parameters work only when the OpenSSL library of version 1.0.1 or higher is used. Allowed values are [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2]. Defaults to TLSv1 TLSv1.1 TLSv1.2.
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
    
    # Specifies that server ciphers should be preferred over client ciphers when using the SSLv3 and TLS protocols. Defaults to off.
	ssl_prefer_server_ciphers on;

	##
	# Logging Settings
	##

	access_log /vagrant/log/nginx/access.log;
	error_log /vagrant/log/nginx/error.log;

	##
	# Gzip Settings
	##
    
    # Enables or disables gzipping of responses. Defaults to off.
    gzip on;
    
    # Disables gzipping of responses for requests with “User-Agent” header fields matching any of the specified regular expressions. The special mask “msie6” (0.7.12) corresponds to the regular expression “MSIE [4-6]\.”, but works faster. Starting from version 0.8.11, “MSIE 6.0; ... SV1” is excluded from this mask.
	gzip_disable "msie6";

	# gzip_vary on;
	# gzip_proxied any;
	# gzip_comp_level 6;
	# gzip_buffers 16 8k;
	# gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

	##
	# Virtual Host Configs
	##

	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;
    
    # Include fastcgi
    # include /etc/nginx/fastcgi.conf
}


#mail {
#	# See sample authentication script at:
#	# http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript
# 
#	# auth_http localhost/auth.php;
#	# pop3_capabilities "TOP" "USER";
#	# imap_capabilities "IMAP4rev1" "UIDPLUS";
# 
#	server {
#		listen     localhost:110;
#		protocol   pop3;
#		proxy      on;
#	}
# 
#	server {
#		listen     localhost:143;
#		protocol   imap;
#		proxy      on;
#	}
#}
